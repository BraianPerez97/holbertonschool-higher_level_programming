---------How to Name Them-------------------------------------------
__test__/ "Folder"
test_filename "File Name"

----------Example Functions------
calc.py """ file to be tested""""

    def add(x, y):
        return x + y

    def subtract(x, y):
        return x - y

    def multiply(x, y):
        return x * y

    def divide(x, y):
        return x / y

    """(hardcided typo bug for edge case: floor division) current test will run because thest cases are whole numbers"""
    def divide(x, y):
        return x // y
    """ To catch this edge case""""
    def divide(x, y):
        if y == 0:
            raise ValueError('Can not divide by zero')
        return x // y

--------------Testing Units--------------------------------------
test_filename.py

import unnitest
import calc

"""Module Comment
    Test casses: a test class that inherits the 'unittest.Testcase'
""""

--------------Test Casses: Test That Inherits-----------------

class TestCalc(unittest.TestCase)

    """"must start with 'test_' (otherwise: "add_test") it gets skipped

    Example: testing the add Functions
    """"

    def test_add(self):

        """built-in functions documantation are online ('sefl.assetExample')
            Edge Casses:
                Errors could happen within this function
        """
        results = calc.add(10, 5)
        self.assertEqual (results, 15)

                    || """ Or """

            """Edge Case: two positves"""
            self.assertEqual(calc.add(10, 5), 15)

            """Edge Case: one positive & one negative""""
            self.assertEqual(calc.add(-1, 1), 0)

            """Edge Case: two negatives"""
            self.assertEqual(calc.add(-1, -1) -2)


    def test_subtract(self):

        """built-in functions documantation are online ('sefl.assetExample')
            Edge Casses:
                Errors could happen within this function
        """
        results = calc.subtract(10, 5)
        self.assertEqual (results, 15)

                    || """ Or """

            """Edge Case: two positves"""
            self.assertEqual(calc.subtract(10, 5), 5)

            """Edge Case: one positive & one negative""""
            self.assertEqual(calc.subtract(-1, 1), -2)

            """Edge Case: two negatives"""
            self.assertEqual(calc.subtract(-1, -1), 0)


    def test_multiply(self):

            """built-in functions documantation are online ('sefl.assetExample')
                Edge Casses:
                    Errors could happen within this function
            """
            results = calc.multiply(10, 5)
            self.assertEqual (results, 15)

                        || """ Or """

                """Edge Case: two positves"""
                self.assertEqual(calc.multiply(10, 5), 50)

                """Edge Case: one positive & one negative""""
                self.assertEqual(calc.multiply(-1, 1), -1)

                """Edge Case: two negatives"""
                self.assertEqual(calc.multiply(-1, -1), 1)


    def test_divide(self):

            """built-in functions documantation are online ('sefl.assetExample')
                Edge Casses:
                    Errors could happen within this function
            """
            results = calc.divide(10, 5)
            self.assertEqual (results, 15)

                        || """ Or """

                """Edge Case: two positves"""
                self.assertEqual(calc.divide(10, 5), -1)

                """Edge Case: one positive & one negative""""
                self.assertEqual(calc.divide(-1, 1), -1)

                """Edge Case: two negatives"""
                self.assertEqual(calc.divide(-1, -1), 1)

                """Edge Case: floor division"""
                self.assertEqual(calc.divide(5, 2), 2.5)

                """Testing Exception:
                    First Value = exception expected
                    Second Value = function we want to run
                    Third Value = each argument
                    |OR|

                    Context Manager
                """
                self.assertRaises(ValueError, calc.divide, 10, 0)
                    |OR|
               Valwith self.assertRaise(ValueError):
                calc.divide(10, 0)



if __name__ === '__main__':
    """Basically: if run this module directly 'python test_filename.py' then run the test code """
    unittest.main()

------------Command Line Test--------------------------------

$python -m unittest test_calc.py
$python test_filename.py
